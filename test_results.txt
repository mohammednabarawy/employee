============================= test session starts =============================
platform win32 -- Python 3.11.7, pytest-7.4.3, pluggy-1.4.0 -- C:\ProgramData\anaconda3\python.exe
cachedir: .pytest_cache
rootdir: E:\original\Coding\employee
plugins: anyio-4.3.0
collecting ... collected 4 items

tests/test_payroll_integration.py::TestPayrollIntegration::test_concurrent_payroll_generation PASSED [ 25%]
tests/test_payroll_integration.py::TestPayrollIntegration::test_contractor_type_setup PASSED [ 50%]
tests/test_payroll_integration.py::TestPayrollIntegration::test_end_to_end_payroll_generation FAILED [ 75%]
tests/test_payroll_integration.py::TestPayrollIntegration::test_transaction_rollback_on_error PASSED [100%]

================================== FAILURES ===================================
__________ TestPayrollIntegration.test_end_to_end_payroll_generation __________

self = <test_payroll_integration.TestPayrollIntegration testMethod=test_end_to_end_payroll_generation>

    def test_end_to_end_payroll_generation(self):
        """Test complete payroll generation process"""
        # Setup required data
        # Insert social insurance config
        self.db.execute('INSERT INTO social_insurance_config (rate, effective_date) VALUES (0.14, "2024-01-01")')
    
        # Create salary components
        self.db.execute("""
            INSERT INTO salary_components (id, name, type, is_percentage, value, tax_exempt, is_taxable)
            VALUES
                (1, 'Housing Allowance', 'allowance', 0, 1000.00, 1, 0),
                (2, 'Transport Allowance', 'allowance', 0, 500.00, 0, 1),
                (3, 'Insurance', 'deduction', 0, 200.00, 0, 0),
                (4, 'Loan', 'deduction', 0, 300.00, 0, 0)
        """)
    
        # Create employee types
        self.db.execute("""
            INSERT INTO employee_types (id, name, is_contractor, overtime_multiplier, holiday_pay_multiplier, working_hours_per_week)
            VALUES
                (1, 'Regular', 0, 1.5, 2.0, 40.0),
                (2, 'Part-time', 0, 1.25, 1.5, 20.0),
                (3, 'Contractor', 1, 0.0, 0.0, 0.0)
        """)
    
        # Setup test data
        cursor = self.db.cursor()
        cursor.execute("""
            INSERT INTO payroll_periods (start_date, end_date, status)
            VALUES ('2024-02-01', '2024-02-28', 'draft')
        """)
        period_id = cursor.lastrowid
    
        # Create test employees
        employees = [
            # Full-time employee
            {
                'first_name': 'John',
                'last_name': 'Doe',
                'email': 'john@example.com',
                'employee_type_id': 1,
                'basic_salary': '5000.00'
            },
            # Part-time employee
            {
                'first_name': 'Jane',
                'last_name': 'Smith',
                'email': 'jane@example.com',
                'employee_type_id': 2,
                'basic_salary': '3000.00'
            },
            # Contractor
            {
                'first_name': 'Bob',
                'last_name': 'Brown',
                'email': 'bob@example.com',
                'employee_type_id': 3,
                'basic_salary': '4000.00'
            }
        ]
    
        employee_ids = []
        for emp_data in employees:
            # Create employee
            cursor = self.db.execute("""
                INSERT INTO employees (
                    first_name, last_name, email,
                    employee_type_id, status
                ) VALUES (?, ?, ?, ?, 'active')
                RETURNING id
            """, (
                emp_data['first_name'],
                emp_data['last_name'],
                emp_data['email'],
                emp_data['employee_type_id']
            ))
            employee_id = cursor.fetchone()['id']
            employee_ids.append(employee_id)
    
            # Create employee details
            self.db.execute("""
                INSERT INTO employee_details (
                    employee_id, basic_salary, date_of_birth,
                    bank_name, bank_account, tax_id, social_insurance_number
                ) VALUES (?, ?, '1990-01-01', 'Test Bank', '123456789', 'TX123', 'SI456')
            """, (employee_id, emp_data['basic_salary']))
    
            # Add salary components
            if emp_data['employee_type_id'] in (1, 2):  # Full-time and part-time
                self.db.execute("""
                    INSERT INTO employee_salary_components (
                        employee_id, component_id, value
                    ) VALUES
                        (?, 1, 1000.00),  -- Housing allowance
                        (?, 2, 500.00),   -- Transport allowance
                        (?, 3, 200.00),   -- Insurance deduction
                        (?, 4, 300.00)    -- Loan deduction
                """, (employee_id,) * 4)
    
            # Add attendance records
            if emp_data['employee_type_id'] == 1:  # Full-time
                self.db.execute("""
                    INSERT INTO attendance_hours (
                        employee_id, period_id, date, type, hours
                    ) VALUES
                        (?, ?, '2024-02-01', 'overtime', 10),
                        (?, ?, '2024-02-01', 'holiday', 8)
                """, (
                    employee_id, period_id,
                    employee_id, period_id
                ))
            elif emp_data['employee_type_id'] == 2:  # Part-time
                self.db.execute("""
                    INSERT INTO attendance_hours (
                        employee_id, period_id, date, type, hours
                    ) VALUES
                        (?, ?, '2024-02-01', 'overtime', 5),
                        (?, ?, '2024-02-01', 'holiday', 4)
                """, (
                    employee_id, period_id,
                    employee_id, period_id
                ))
    
        # Debug: Print employee details before generating payroll
        for employee_id in employee_ids:
            try:
                employee = self.employee_repo.get_employee_details(employee_id)
                print(f"Employee {employee_id} details: {employee}")
            except Exception as e:
                print(f"Error fetching employee {employee_id}: {str(e)}")
    
        # Temporarily patch transaction methods to avoid transaction issues in tests
        original_begin = self.payroll_repo.begin_transaction
        original_commit = self.payroll_repo.commit_transaction
        original_rollback = self.payroll_repo.rollback_transaction
    
        self.payroll_repo.begin_transaction = lambda: None
        self.payroll_repo.commit_transaction = lambda: None
        self.payroll_repo.rollback_transaction = lambda: None
        self.payroll_repo._transaction_active = True  # Set to True to bypass transaction checks
    
        try:
            # Generate payroll
            result = self.service.generate_payroll(period_id, employee_ids)
            self.assertIsNotNone(result)
            self.assertEqual(len(result['entries']), 3)
    
            # Verify results
            self.assertEqual(len(result['entries']), 3)
    
            # Check individual entries
            for entry in result['entries']:
                if entry['employee_id'] == employee_ids[0]:  # Full-time
>                   self.assertEqual(entry['basic_salary'], Decimal('5000.00'))
E                   AssertionError: '5000' != Decimal('5000.00')

tests\test_payroll_integration.py:209: AssertionError
---------------------------- Captured stdout call -----------------------------
Employee 1 details: <sqlite3.Row object at 0x00000191E144E5F0>
Employee 2 details: <sqlite3.Row object at 0x00000191E144E6B0>
Employee 3 details: <sqlite3.Row object at 0x00000191E144E5F0>
=========================== short test summary info ===========================
FAILED tests/test_payroll_integration.py::TestPayrollIntegration::test_end_to_end_payroll_generation
========================= 1 failed, 3 passed in 1.55s =========================
